"use client"
// import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { AuthProvider, useAuth } from "../../context/AuthContext";
import { useEffect } from "react";
import { usePathname, useRouter } from "next/navigation";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <AuthProvider>
      <html lang="en">
        <body
          className={`${geistSans.variable} ${geistMono.variable} antialiased`}
        >
          <AuthWrapper>{children}</AuthWrapper>
        </body>
      </html>
    </AuthProvider>
  );
}

// Create a wrapper component to use `useAuth` inside `AuthProvider`
function AuthWrapper({ children }: { children: React.ReactNode }) {
  const { accessToken, login } = useAuth();
  const pathname = usePathname();
  const router = useRouter();


  useEffect(() => {
    const refreshToken = async () => {
      try {
        const response = await fetch('/api/auth/refresh', {
          method: 'POST',
        });
        if (response.ok) {
          const { accessToken } = await response.json();
          login(accessToken);
        } else {
          router.push('/signin');
        }
      } catch (error) {
        console.error('Error refreshing token:', error);
      }
    };

    if (accessToken ) {
      try {
        const decodedToken = JSON.parse(atob(accessToken.split('.')[1]));
        const isExpired = decodedToken.exp * 1000 < Date.now();
        if (isExpired) {
          refreshToken();
        }
      } catch (error) {
        console.error('Error decoding token:', error);
        router.push('/signin');
      }
    }

  }, [accessToken, login, pathname, router]);

  return <>{children}</>;
}