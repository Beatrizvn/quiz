// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String      @id @default(uuid())
  name  String      @unique
  email     String      @unique
  password  String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  quizzes   Quiz[]
  attempts  NumAttempt[]
  answers   UserAnswer[]
}

model Quiz {
  id               String     @id @default(uuid())
  createdByUserId  String     @map("created_by_user_id")
  dateOfCreation   DateTime   @default(now()) @map("date_of_creation")
  createdBy        User       @relation(fields: [createdByUserId], references: [id])
  questions        Question[]
  attempts         NumAttempt[]

  @@map("quizzes") // Opcional: para mapear o nome da tabela no banco de dados
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
}

model Question {
  id           String       @id @default(uuid())
  quizId       String       @map("quiz_id")
  type         QuestionType
  question     String
  option1      String
  option2      String
  option3      String
  option4      String
  rightAnswer  String       @map("right_answer")
  quiz         Quiz         @relation(fields: [quizId], references: [id])
  answers      UserAnswer[]

  @@map("questions") // Opcional: para mapear o nome da tabela no banco de dados
}

model NumAttempt {
  id           String       @id @default(uuid())
  quizId       String       @map("quiz_id")
  userId       String       @map("user_id")
  attemptDate  DateTime     @default(now()) @map("attempt_date")
  quiz         Quiz         @relation(fields: [quizId], references: [id])
  user         User         @relation(fields: [userId], references: [id])
  answers      UserAnswer[]

  @@map("num_attempts") // Opcional: para mapear o nome da tabela no banco de dados
}

model UserAnswer {
  id             String       @id @default(uuid())
  questionId     String       @map("question_id")
  userId         String       @map("user_id")
  numAttemptId   String       @map("num_attempt_id")
  userAnswer     String       @map("user_answer")
  question       Question     @relation(fields: [questionId], references: [id])
  user           User         @relation(fields: [userId], references: [id])
  attempt        NumAttempt   @relation(fields: [numAttemptId], references: [id])

  @@map("user_answers") // Opcional: para mapear o nome da tabela no banco de dados
}
